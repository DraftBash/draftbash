name: CI/CD Pipeline for GKE with Terraform

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/draftbash-repo/draftbash-app

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 1: Set up Google Cloud SDK
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}
          export_default_credentials: true

      # Step 2: Configure Docker to use Google Artifact Registry
      - name: Configure Docker for Google Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      # Step 3: Build Docker image with dynamic tag (using Git SHA as version)
      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME:${{ github.sha }} .

      # Step 4: Push Docker image to Artifact Registry
      - name: Push Docker Image to Google Artifact Registry
        run: |
          docker push $IMAGE_NAME:${{ github.sha }}
        
        working-directory: ./nodeapp

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 5: Set up Google Cloud SDK
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}
          export_default_credentials: true

      # Step 6: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      # Step 7: Initialize and apply Terraform with the image name
      - name: Terraform Init and Apply
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="container_image=$IMAGE_NAME:${{ github.sha }}"
        working-directory: ./terraform