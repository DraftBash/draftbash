name: CI/CD Pipeline for GKE with Terraform

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/draftbash-repo/draftbash-app

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 1: Authenticate with Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      # Step 2: Set up Google Cloud SDK
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'

      # Step 3: Configure Docker to use Google Artifact Registry
      - name: Configure Docker for Google Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      # Step 4: Build Docker image with dynamic tag (using Git SHA as version)
      - name: Build Docker Image
        run: |
          cd nodeapp
          docker build -t $IMAGE_NAME:${{ github.sha }} .

      # Step 5: Push Docker image to Artifact Registry
      - name: Push Docker Image to Google Artifact Registry
        run: |
          docker push $IMAGE_NAME:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 6: Authenticate with Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      # Step 7: Set up Google Cloud SDK
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'

      # Step 8: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      # Step 9: Initialize Terraform
      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      # Step 10: Validate Terraform configuration
      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      # Step 11: Plan and Apply Terraform with the image name
      - name: Terraform Plan and Apply
        run: |
          cd terraform
          export TF_LOG=DEBUG
          terraform plan -var="container_image=$IMAGE_NAME:${{ github.sha }}"
          terraform apply -auto-approve -var="container_image=$IMAGE_NAME:${{ github.sha }}" -input=false